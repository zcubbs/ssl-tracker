syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "rpc_create_user.proto";
import "rpc_update_user.proto";
import "rpc_login_user.proto";
import "rpc_verify_email.proto";
import "rpc_create_domain.proto";
import "rpc_get_domains.proto";
import "rpc_create_namespace.proto";
import "rpc_ping.proto";
import "empty.proto";

option go_package = "github.com/zcubbs/tlz";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "TLZ API";
    version: "0.1.0";
    contact: {
      name: "TLZ API";
      url: "https://github.com/zcubbs/tlz";
      email: "zcubbs@pm.me";
    };
  };
};

service Tlz {
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/create_user"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new user";
      description: "Create a new user";
    };
  }
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/v1/update_user"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a new user";
      description: "Update a new user";
    };
  }
  rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
      post: "/v1/login_user"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Login a user";
      description: "Login a user and retrieve access/refresh tokens";
    };
  }
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      get: "/v1/verify_email"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Verify Email";
      description: "Verify a user's email address";
    };
  }

  rpc Ping (Empty) returns (PingResponse){
    option (google.api.http) = {
      get: "/v1/ping"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Ops"
      summary: "Ping the server";
      description: "Ping the server";
    };
  }

  rpc CreateDomain(CreateDomainRequest) returns (CreateDomainResponse) {
    option (google.api.http) = {
      post: "/v1/create_domain"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new domain";
      description: "Create a new domain for a user";
    };
  }

  rpc GetDomains(Empty) returns (GetDomainsResponse) {
    option (google.api.http) = {
      get: "/v1/get_domains"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get domains";
      description: "Get domains for a user";
    };
  }

  rpc CreateNamespace(CreateNamespaceRequest) returns (CreateNamespaceResponse) {
    option (google.api.http) = {
      post: "/v1/create_namespace"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new namespace";
      description: "Create a new namespace for a user";
    };
  }
}
