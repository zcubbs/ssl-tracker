version: '3'

env:
  GOOS: "{{OS}}"

vars:
  # sqlite connection string
  TEST_DB_URL: "file:./db.sqlite?cache=shared&mode=rwc"
  LOCAL_HOST: 127.0.0.1
  GO_PACKAGE: github.com/zcubbs/tlz
  GO_PACKAGE_SHORT: tlz

tasks:
  build:
    desc: Build Go Binaries
    cmds:
      - go build -o ./bin/server ./cmd/server

  build:npm:
    desc: Build NPM Binaries
    dir: cmd/server/web
    cmds:
      - npm run build

  run:server:
    desc: Run the server
    cmds:
      - cmd: go run .\cmd\server\main.go

  migrate:new:
    desc: "Generate migration. Usage: task migrate:new -- <migration_name>"
    cmds:
      - cmd: migrate create -ext sql -dir cmd/server/db/migration -seq {{.CLI_ARGS}}

  migrate-up:
    desc: Run database migration
    cmds:
      - migrate -source file://cmd/server/db/migration -database "{{.TEST_DB_URL}}" up

  migrate-down:
    desc: Rollback database migration
    cmds:
      - migrate -source file://cmd/server/db/migration -database "{{.TEST_DB_URL}}" down

  proto:
    aliases: [ pb ]
    desc: Generate proto code
    cmds:
      - task: proto:{{OS}}
      - >-
        protoc --proto_path=proto --proto_path=proto/google/api --proto_path=proto/protoc-gen-openapiv2/options
        --go_out=pb --go_opt=paths=source_relative
        --go-grpc_out=pb --go-grpc_opt=paths=source_relative
        --grpc-gateway_out=pb --grpc-gateway_opt=paths=source_relative
        --openapiv2_out=cmd/server/docs/swagger --openapiv2_opt=allow_merge=true,merge_file_name={{.GO_PACKAGE_SHORT}}
        "proto/*.proto"

  proto:windows:
    desc: Generate proto code for Windows
    cmds:
      - cmd: powershell rm "pb/*.go"
      - cmd: powershell rm "cmd/server/docs/swagger/*.json"

  proto:darwin:
    desc: Generate proto code for MacOS
    cmds:
      - cmd: rm -f pb/*.go
      - cmd: rm -f cmd/server/docs/swagger/*.json

  sqlc:
    desc: Generate SQLC code
    dir: cmd/server/db
    cmds:
      - task: sqlc-{{OS}}

  sqlc-windows:
    desc: Generate SQLC code for Windows
    dir: cmd/server/db
    cmds:
      - cmd: docker run --rm -v $(pwd):/src -w /src sqlc/sqlc generate
  #      - cmd: sqlc generate

  sqlc-darwin:
    desc: Generate SQLC code for MacOS
    dir: cmd/server/db
    cmds:
      - cmd: sqlc generate

  sqlc-linux:
    desc: Generate SQLC code for Linux
    dir: cmd/server/db
    cmds:
      - cmd: sqlc generate

  lint:
    desc: Run linter
    cmds:
      - golangci-lint run ./... -v

  mock:
    desc: Generate mocks
    cmds:
      - task: mock:server:db

  mock:server:db:
    desc: Generate mocks for server db
    dir: cmd/server
    cmds:
      - cmd: mockgen -package mockdb -destination db/mock/store.go {{.GO_PACKAGE}}/cmd/server/db/sqlc Store

  test:
    desc: Run tests
    cmds:
      - go test -cover ./...

  scan:
    desc: Run security scanner
    cmds:
      - gosec -conf .gosec.config.json "./..."

  tools:
    desc: Install all necessary tools and CLI dependencies for local development
    cmds:
      - task: tools:install:golangci-lint
      - task: tools:install:gosec
      - task: tools:install:protoc
      - task: tools:install:grpcurl
      - go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
      - go install go.uber.org/mock/mockgen@latest
      - go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

      ### OS specific
      - task: tools:{{OS}}

  tools:darwin:
    desc: Install all necessary tools and CLI dependencies for MacOS
    cmds:
      - brew install protobuf
      - brew tap ktr0731/evans
      - brew install evans

  tools:windows:
    desc: Install all necessary tools and CLI dependencies for Windows
    cmds:
      - powershell -ExecutionPolicy Bypass -File ./scripts/protoc/install_protobuf.ps1
      - go install github.com/ktr0731/evans@latest # on Mac brew is better

  tools:linux:
    desc: Install all necessary tools and CLI dependencies for Linux
    cmds:
      - echo "TODO"

  tools:install:grpcurl:
    desc: Install grpcurl
    cmds:
      - task: install:grpcurl:{{OS}}

  tools:install:grpcurl:windows:
    desc: Install grpcurl
    cmds:
      - go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest

  tools:install:grpcurl:darwin:
    desc: Install grpcurl
    cmds:
      - brew install grpcurl

  tools:install:golangci-lint:
    desc: Install golangci-lint
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

  tools:install:gosec:
    desc: Install gosec
    cmds:
      - go install github.com/securego/gosec/v2/cmd/gosec@latest

  tools:install:protoc:
    desc: Install protoc
    cmds:
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
      - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
      - go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.17.0
      - go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.17.0

  # only needed on windows at build time, if switching to sqlite + CGO_ENABLED=1
  tools:install:gcc:
    desc: Install gcc
    aliases: [ install:cygwin ]
    cmds:
      - scoop install gcc

  containers:up:
    desc: Start all containers
    cmds:
      - task: pg
      - task: redis
      - task: mailpit

  containers:down:
    desc: Stop all containers
    cmds:
      - task: pg:stop
      - task: redis:down
      - task: mailpit:down

  pg:
    desc: Start Postgres
    cmds:
      - docker run --rm --name tlz-postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=tlz -p 5432:5432 -d postgres:14-alpine

  pg:stop:
    desc: Stop Postgres
    cmds:
      - docker stop tlz-postgres

  redis:
    desc: Start Redis
    cmds:
      - docker run --rm --name tlz-redis -p 6379:6379 -d redis:alpine

  redis:down:
    desc: Stop Redis
    cmds:
      - docker stop tlz-redis

  mailpit:
    desc: Start Mailpit
    cmds:
      - >-
        docker run --rm -d --name tlz-mailpit
        -p 1025:1025 -p 1080:1080
        -e MP_SMTP_AUTH_ACCEPT_ANY=true -e MP_SMTP_AUTH_ALLOW_INSECURE=true
        axllent/mailpit

  mailpit:down:
    desc: Stop Mailpit
    cmds:
      - docker stop tlz-mailpit

  test-grpc:
    desc: Run grpcurl tests
    cmds:
      - grpcurl -plaintext localhost:9000 pb.TlzService/Ping

  tls:
    desc: Copy TLS certificates
    cmds:
      - task: tls:{{OS}}

  tls:windows:
    desc: Copy TLS certificates for Windows
    vars:
      GENERATED_DIR: generated
      SERVER_DIR: cmd/server
      SCRIPTS_DIR: scripts/tls
    cmds:
      - echo "Copying TLS certificate to tls directory..."
      - cmd: powershell New-Item -Path {{.SERVER_DIR}}/certs -ItemType Directory -ErrorAction SilentlyContinue
        ignore_error: true
      - powershell Copy-Item {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/server.crt -Destination {{.SERVER_DIR}}/certs/server.crt
      - powershell Copy-Item {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/server.key -Destination {{.SERVER_DIR}}/certs/server.key

  tls:gen:
    desc: Generate TLS certificates
    cmds:
      - task: tls:gen:{{OS}}

  tls:gen:windows:
    desc: Generate TLS certificates for Windows
    vars:
      GENERATED_DIR: generated
      SERVER_DIR: cmd/server
      SCRIPTS_DIR: scripts/tls
    cmds:
      - echo "Generating TLS certificate..." $SCRIPTS_DIR
      - cmd: powershell New-Item -Path {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}} -ItemType Directory -ErrorAction SilentlyContinue
        ignore_error: true
      - openssl genrsa -out {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/ca.key 4096
      - openssl req -new -x509 -key {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/ca.key -sha256 -subj "/C=SE/ST=HL/O=Example, INC." -days 365 -out {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/ca.cert
      - openssl genrsa -out {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/server.key 4096
      - openssl req -new -key {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/server.key -out {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/server.csr -config {{.SCRIPTS_DIR}}/certificate.conf
      - openssl x509 -req -in {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/server.csr -CA {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/ca.cert -CAkey {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/ca.key -CAcreateserial -out {{.SCRIPTS_DIR}}/{{.GENERATED_DIR}}/server.crt -days 365 -sha256 -extfile {{.SCRIPTS_DIR}}/certificate.conf -extensions req_ext
      - echo "TLS certificate generated."
