version: '3'

env:
  GOOS: "{{OS}}"

vars:
  TEST_DB_URL: "postgres://postgres:postgres@127.0.0.1:5432/tlz?sslmode=disable"
  LOCAL_HOST: 127.0.0.1

tasks:
  bootstrap:
    desc: Install all necessary tools and CLI dependencies
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
      - go install github.com/securego/gosec/v2/cmd/gosec@latest
      - go install go.uber.org/mock/mockgen@latest
      - go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
      ### Proto
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      - >-
        go install
        github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway
        github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
        google.golang.org/protobuf/cmd/protoc-gen-go
        google.golang.org/grpc/cmd/protoc-gen-go-grpc
      ### OS specific
      - task: bootstrap:{{OS}}

  bootstrap:darwin:
    desc: Install all necessary tools and CLI dependencies for MacOS
    cmds:
      - brew install buildpacks/tap/pack
      - brew install protobuf
      - brew tap ktr0731/evans
      - brew install evans

  bootstrap:windows:
    desc: Install all necessary tools and CLI dependencies for Windows
    cmds:
      - scoop install pack
      - powershell -File ./scripts/install_protobuf.ps1
      - go install github.com/ktr0731/evans@latest # on Mac brew is better

  bootstrap:linux:
    desc: Install all necessary tools and CLI dependencies for Linux
    cmds:
      - sudo add-apt-repository ppa:cncf-buildpacks/pack-cli
      - sudo apt-get update
      - sudo apt-get install pack-cli

  go:deps:
    desc: Install Go dependencies
    cmds:
      - go mod tidy
      - go mod download

  node:deps:
    desc: Install Node.js dependencies
    cmds:
      - cd web && npm install

  react:build:
    desc: Build React application
    deps: [ node:deps ]
    cmds:
      - cd web && npm run build

  go:build:
    desc: Build Go application
    deps: [ go:deps, react:build ]
    cmds:
      - go build -o ./bin/server ./...

  image:build:
    desc: Build Docker image
    deps: [ go:build ]
    cmds:
      - pack build tlz --builder gcr.io/buildpacks/builder:v1 --buildpack paketo-buildpacks/go
      - pack sbom download tlz

  start:
    desc: Start the application
    cmds:
      - ./bin/server

  mock:
    desc: Generate mocks
    cmds:
      - cmd: mockgen -package mockdb -destination db/mock/store.go github.com/zcubbs/tlz/db/sqlc Store

  sqlc:
    desc: Generate SQLC code
    cmds:
      - task: sqlc-{{OS}}

  sqlc-windows:
    desc: Generate SQLC code for Windows
    cmds:
      - cmd: docker run --rm -v "${PWD}:/src" -w /src sqlc/sqlc generate

  sqlc-darwin:
    desc: Generate SQLC code for MacOS
    cmds:
      - cmd: sqlc generate

  sqlc-linux:
    desc: Generate SQLC code for Linux
    cmds:
      - cmd: sqlc generate

  mailhog:up:
    desc: Start MailHog
    cmds:
      - docker run --rm --name mailhog -d -p 1025:1025 -p 8025:8025 mailhog/mailhog

  mailhog:down:
    desc: Stop MailHog
    cmds:
      - docker stop mailhog

  pg:
    desc: Start Postgres
    cmds:
      - docker run --rm --name tlz-postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=tlz -p 5432:5432 -d postgres:14-alpine

  pg:down:
    desc: Stop Postgres
    cmds:
      - docker stop tlz-postgres

  createdb:
    desc: Create database
    cmds:
      - docker exec -it tlz-postgres createdb --username=postgres --owner=postgres tlz

  dropdb:
    desc: Drop database
    cmds:
      - docker exec -it tlz-postgres dropdb --username=postgres tlz

  migrate:
    desc: Run database migration
    cmds:
      - migrate -path db/migrations -database "{{.TEST_DB_URL}}" -verbose up

  migrate:down:
    desc: Rollback database migration
    cmds:
      - migrate -path db/migrations -database "{{.TEST_DB_URL}}" -verbose down

  migrate:new:
    desc: "Generate migration. Usage: task migrate:new -- <migration_name>"
    cmds:
      - cmd: migrate create -ext sql -dir db/migrations -seq {{.CLI_ARGS}}

  network:
    desc: Create Docker network
    cmds:
      - docker network create tlz

  up:
    desc: Start the application with all dependencies
    deps: [ pg, createdb, migrate, mailhog:up, go:build ]
    cmds:
      - ./bin/server

  lint:
    desc: Run linter
    cmds:
      - golangci-lint run ./... -v

  test:
    desc: Run tests
    cmds:
      - go test -v -cover ./...

  gosec:
    desc: Run security scanner
    cmds:
      - gosec -conf .gosec.config.json "./..."

  proto:
    desc: Generate proto code
    cmds:
      - task: proto:{{OS}}
      - >-
        protoc --proto_path=proto
        --go_out=pb --go_opt=paths=source_relative
        --go-grpc_out=pb --go-grpc_opt=paths=source_relative
        --grpc-gateway_out=pb --grpc-gateway_opt=paths=source_relative
        --openapiv2_out=docs/swagger --openapiv2_opt=allow_merge=true,merge_file_name=tlz
        "proto/*.proto"

  proto:windows:
    desc: Generate proto code for Windows
    cmds:
      - cmd: powershell rm "pb/*.go"
      - cmd: powershell rm "docs/swagger/*.json"

  proto:darwin:
    desc: Generate proto code for MacOS
    cmds:
      - cmd: rm -f pb/*.go
      - cmd: rm -f docs/swagger/*.json

  evans:
    desc: Run Evans CLI
    cmds:
      - evans --host {{.LOCAL_HOST}} --port 9000 -r repl

  redis:
    desc: Start Redis
    cmds:
      - docker run --rm --name tlz-redis -p 6379:6379 -d redis:alpine
