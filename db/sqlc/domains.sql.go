// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: domains.sql

package db

import (
	"context"
	"database/sql"
)

const deleteDomain = `-- name: DeleteDomain :exec
DELETE FROM domains WHERE name = $1
`

func (q *Queries) DeleteDomain(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteDomain, name)
	return err
}

const getDomain = `-- name: GetDomain :one
SELECT name, certificate_expiry, status, issuer FROM domains WHERE name = $1
`

func (q *Queries) GetDomain(ctx context.Context, name string) (Domain, error) {
	row := q.db.QueryRowContext(ctx, getDomain, name)
	var i Domain
	err := row.Scan(
		&i.Name,
		&i.CertificateExpiry,
		&i.Status,
		&i.Issuer,
	)
	return i, err
}

const getDomains = `-- name: GetDomains :many
SELECT name, certificate_expiry, status, issuer FROM domains
ORDER BY name
`

func (q *Queries) GetDomains(ctx context.Context) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, getDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Domain{}
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.Name,
			&i.CertificateExpiry,
			&i.Status,
			&i.Issuer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDomain = `-- name: InsertDomain :one
INSERT INTO domains
    (name,status)
VALUES ($1,$2)
RETURNING name, certificate_expiry, status, issuer
`

type InsertDomainParams struct {
	Name   string         `json:"name"`
	Status sql.NullString `json:"status"`
}

func (q *Queries) InsertDomain(ctx context.Context, arg InsertDomainParams) (Domain, error) {
	row := q.db.QueryRowContext(ctx, insertDomain, arg.Name, arg.Status)
	var i Domain
	err := row.Scan(
		&i.Name,
		&i.CertificateExpiry,
		&i.Status,
		&i.Issuer,
	)
	return i, err
}

const updateDomain = `-- name: UpdateDomain :one
UPDATE domains
SET status = $1, certificate_expiry = $2, issuer = $3
WHERE name = $4
RETURNING name, certificate_expiry, status, issuer
`

type UpdateDomainParams struct {
	Status            sql.NullString `json:"status"`
	CertificateExpiry sql.NullTime   `json:"certificate_expiry"`
	Issuer            sql.NullString `json:"issuer"`
	Name              string         `json:"name"`
}

func (q *Queries) UpdateDomain(ctx context.Context, arg UpdateDomainParams) (Domain, error) {
	row := q.db.QueryRowContext(ctx, updateDomain,
		arg.Status,
		arg.CertificateExpiry,
		arg.Issuer,
		arg.Name,
	)
	var i Domain
	err := row.Scan(
		&i.Name,
		&i.CertificateExpiry,
		&i.Status,
		&i.Issuer,
	)
	return i, err
}
