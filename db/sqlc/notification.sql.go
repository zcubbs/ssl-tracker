// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: notification.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteNotification, id)
	return err
}

const getNotification = `-- name: GetNotification :one
SELECT id, subject, message, send_to, channel, created_at FROM notifications WHERE id = $1
`

func (q *Queries) GetNotification(ctx context.Context, id uuid.UUID) (Notification, error) {
	row := q.db.QueryRow(ctx, getNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Message,
		&i.SendTo,
		&i.Channel,
		&i.CreatedAt,
	)
	return i, err
}

const getNotifications = `-- name: GetNotifications :many
SELECT id, subject, message, send_to, channel, created_at FROM notifications
`

func (q *Queries) GetNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Subject,
			&i.Message,
			&i.SendTo,
			&i.Channel,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsByChannel = `-- name: GetNotificationsByChannel :many
SELECT id, subject, message, send_to, channel, created_at FROM notifications WHERE channel = $1
`

func (q *Queries) GetNotificationsByChannel(ctx context.Context, channel string) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByChannel, channel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Subject,
			&i.Message,
			&i.SendTo,
			&i.Channel,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNotification = `-- name: InsertNotification :one
INSERT INTO notifications
  (subject, message, send_to, channel)
VALUES ($1, $2, $3, $4)
RETURNING id, subject, message, send_to, channel, created_at
`

type InsertNotificationParams struct {
	Subject string `json:"subject"`
	Message string `json:"message"`
	SendTo  string `json:"send_to"`
	Channel string `json:"channel"`
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, insertNotification,
		arg.Subject,
		arg.Message,
		arg.SendTo,
		arg.Channel,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Message,
		&i.SendTo,
		&i.Channel,
		&i.CreatedAt,
	)
	return i, err
}

const updateNotification = `-- name: UpdateNotification :one
UPDATE notifications SET subject = $1, message = $2, send_to = $3, channel = $4
WHERE id = $5
RETURNING id, subject, message, send_to, channel, created_at
`

type UpdateNotificationParams struct {
	Subject string    `json:"subject"`
	Message string    `json:"message"`
	SendTo  string    `json:"send_to"`
	Channel string    `json:"channel"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, updateNotification,
		arg.Subject,
		arg.Message,
		arg.SendTo,
		arg.Channel,
		arg.ID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Message,
		&i.SendTo,
		&i.Channel,
		&i.CreatedAt,
	)
	return i, err
}
