// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: namespace.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getAllNamespaces = `-- name: GetAllNamespaces :many
SELECT id, name, enabled, billing_enabled, billing_period, billing_price, billing_currency, billing_last_charge, billing_next_charge, user_id, created_at FROM namespaces
WHERE user_id = $1
ORDER BY name
`

func (q *Queries) GetAllNamespaces(ctx context.Context, userID uuid.UUID) ([]Namespace, error) {
	rows, err := q.db.Query(ctx, getAllNamespaces, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Namespace{}
	for rows.Next() {
		var i Namespace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Enabled,
			&i.BillingEnabled,
			&i.BillingPeriod,
			&i.BillingPrice,
			&i.BillingCurrency,
			&i.BillingLastCharge,
			&i.BillingNextCharge,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNamespace = `-- name: GetNamespace :one
SELECT id, name, enabled, billing_enabled, billing_period, billing_price, billing_currency, billing_last_charge, billing_next_charge, user_id, created_at FROM namespaces
WHERE name = $1 AND user_id = $2
`

type GetNamespaceParams struct {
	Name   string    `json:"name"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetNamespace(ctx context.Context, arg GetNamespaceParams) (Namespace, error) {
	row := q.db.QueryRow(ctx, getNamespace, arg.Name, arg.UserID)
	var i Namespace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Enabled,
		&i.BillingEnabled,
		&i.BillingPeriod,
		&i.BillingPrice,
		&i.BillingCurrency,
		&i.BillingLastCharge,
		&i.BillingNextCharge,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const insertNamespace = `-- name: InsertNamespace :one
INSERT INTO namespaces
    (name,user_id)
VALUES ($1,$2)
RETURNING id, name, enabled, billing_enabled, billing_period, billing_price, billing_currency, billing_last_charge, billing_next_charge, user_id, created_at
`

type InsertNamespaceParams struct {
	Name   string    `json:"name"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) InsertNamespace(ctx context.Context, arg InsertNamespaceParams) (Namespace, error) {
	row := q.db.QueryRow(ctx, insertNamespace, arg.Name, arg.UserID)
	var i Namespace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Enabled,
		&i.BillingEnabled,
		&i.BillingPeriod,
		&i.BillingPrice,
		&i.BillingCurrency,
		&i.BillingLastCharge,
		&i.BillingNextCharge,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
